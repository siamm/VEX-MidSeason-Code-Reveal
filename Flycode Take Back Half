#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, dgtl8,  Piston2,        sensorDigitalOut)
#pragma config(Sensor, I2C_1,  Motorport7,     sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port7,           Motorport7,    tmotorVex393TurboSpeed_MC29, openLoop, reversed, encoderPort, I2C_1)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

	// Update inteval (in mS) for the flywheel control loop
	#define FW_LOOP_SPEED              1
	
	// Maximum power we want to send to the flywheel motors
	#define FW_MAX_POWER              120
	
	// encoder counts per revolution depending on motor
	#define MOTOR_TPR_269           240.448
	#define MOTOR_TPR_393R          261.333
	#define MOTOR_TPR_393S          392
	#define MOTOR_TPR_393T          627.2
	#define MOTOR_TPR_QUAD          360.0
	

	// encoder tick per revolution
	float           ticks_per_rev;          ///< encoder ticks per revolution
	

	// Encoder
	long            encoder_counts;         ///< current encoder count
	long            encoder_counts_last;    ///< current encoder count
	

	// velocity measurement
	float           motor_velocity;         ///< current velocity in rpm
	long            nSysTime_last;          ///< Time of last velocity calculation
	

	// TBH control algorithm variables
	long            target_velocity;        ///< target_velocity velocity
	float           current_error;          ///< error between actual and target_velocity velocities
	float           last_error;             ///< error last time update called
	float           gain;                   ///< gain
	float           drive;                  ///< final drive out of TBH (0.0 to 1.0)
	float           drive_at_zero;          ///< drive at last zero crossing
	long            first_cross;            ///< flag indicating first zero crossing
	float           drive_approx;           ///< estimated open loop drive 
	

	// final motor drive
	long            motor_drive;            ///< final motor control value

	/*-----------------------------------------------------------------------------*/
	/** @brief      Set the flywheen motors                                        */
	/** @param[in]  value motor control value                                      */
	/*-----------------------------------------------------------------------------*/
	void
	FwMotorSet( int value )
	{
	    motor[ port4] = value;
	    motor[ port5] = value;
	    motor[ port6 ] = value;
	    motor[ port7 ] = value;
	}
	

	/*-----------------------------------------------------------------------------*/
	/** @brief      Get the flywheen motor encoder count                           */
	/*-----------------------------------------------------------------------------*/
	long
	FwMotorEncoderGet()
	{
	    return( nMotorEncoder[ port7 ] );
	}
	

	/*-----------------------------------------------------------------------------*/
	/** @brief      Set the controller position                                    */
	/** @param[in]  desired velocity                                               */
	/** @param[in]  predicted_drive estimated open loop motor drive                */
	/*-----------------------------------------------------------------------------*/
	void
	FwVelocitySet( int velocity, float predicted_drive )
	{
	    // set target_velocity velocity (motor rpm)
	    target_velocity = velocity;
	

	    // Set error so zero crossing is correctly detected
	    current_error = target_velocity - motor_velocity;
	    last_error    = current_error;
	

	    // Set predicted open loop drive value
	    drive_approx  = predicted_drive;
	    // Set flag to detect first zero crossing
	    first_cross   = 1;
	    // clear tbh variable
	    drive_at_zero = 0;
	}
	

	/*-----------------------------------------------------------------------------*/
	/** @brief      Calculate the current flywheel motor velocity                  */
	/*-----------------------------------------------------------------------------*/
	void
	FwCalculateSpeed()
	{
	    int     delta_ms;
	    int     delta_enc;
	    
	    // Get current encoder value
	    encoder_counts = FwMotorEncoderGet();
	

	    // This is just used so we don't need to know how often we are called
	    // how many mS since we were last here
	    delta_ms = nSysTime - nSysTime_last;
	    nSysTime_last = nSysTime;
	

	    // Change in encoder count
	    delta_enc = (encoder_counts - encoder_counts_last);
	

	    // save last position
	    encoder_counts_last = encoder_counts;
	

	    // Calculate velocity in rpm
	    motor_velocity = (1000.0 / delta_ms) * delta_enc * 60.0 / ticks_per_rev;
	}
	

	/*-----------------------------------------------------------------------------*/
	/** @brief      Update the velocity tbh controller variables                   */
	/*-----------------------------------------------------------------------------*/
	void
	FwControlUpdateVelocityTbh()
	{
	    // calculate error in velocity
	    // target_velocity is desired velocity
	    // current is measured velocity
	    current_error = target_velocity - motor_velocity;
	

	    // Calculate new control value
	    drive =  drive + (current_error * gain);
	

	    // Clip to the range 0 - 1.
	    // We are only going forwards
	    if( drive > 1 )
	    {
	          drive = 1;
	        }
	    if( drive < 0 )
	    {
	          drive = 0;
	        }
	

	    // Check for zero crossing
	    if( sgn(current_error) != sgn(last_error) ) 
	    {
	        // First zero crossing after a new set velocity command
	        if( first_cross ) 
	        	{
	            // Set drive to the open loop approximation
	            drive = drive_approx;
	            first_cross = 0;
	        	}
	        else
	        	{
	            drive = 0.5 * ( drive + drive_at_zero );
	          }
	

	        // Save this drive value in the "tbh" variable
	        drive_at_zero = drive;
	    }
	

	    // Save last error
	    last_error = current_error;
	}
	

	/*-----------------------------------------------------------------------------*/
	/** @brief     Task to control the velocity of the flywheel                    */
	/*-----------------------------------------------------------------------------*/
	task
	FwControlTask()
	{
	    // Set the gain
	    gain = 0.00025;
	    
	    // We are using Speed geared motors
	    // Set the encoder ticks per revolution
	    ticks_per_rev = MOTOR_TPR_393R;
	

	    while(1)
	        {
	        // Calculate velocity
	        FwCalculateSpeed();
	

	        // Do the velocity TBH calculations
	        FwControlUpdateVelocityTbh() ;
	    
	        // Scale drive into the range the motors need
	        motor_drive  = (drive * FW_MAX_POWER) + 0.5;
	    
	        // Final Limit of motor values - don't really need this
	        if( motor_drive >  127 ) 
	        {
	        	motor_drive =  127;
	        }
	        if( motor_drive < -127 ) 
	        {
	        	motor_drive = -127;
	        }
	    
	        // and finally set the motor control value
	        FwMotorSet( motor_drive );
	        
	        // Run at somewhere between 20 and 50mS
	        wait1Msec( FW_LOOP_SPEED );
	        }
	}
	

	// Main user task
	task main()
	{
	  
	    // Start the flywheel control task
	    startTask( FwControlTask );
	    
	    // Main user control loop
	    while(1)
	        {
	        	
	      motor[port2] = vexRT[Ch3] + vexRT[Ch1];
        motor[port9] = vexRT[Ch3] + vexRT[Ch1];
				motor[port8] = vexRT[Ch3] - vexRT[Ch1];
				motor[port3] = vexRT[Ch3] - vexRT[Ch1];
		
				motor[port10] = vexRT[Ch2Xmtr2];
			
				// Different speeds set by buttons
				
				if (vexRT[Btn6UXmtr2] == 1) SensorValue[Piston2] = 0;
	      else if( vexRT[ Btn5DXmtr2 ] == 1 ) FwVelocitySet( 250, 0.8 );    //Base Shoot (from colour tile) FAST
	      else if( vexRT[ Btn5UXmtr2 ] == 1 ) FwVelocitySet( 175, 0.56 );   //Shooting from centre
	      else if( vexRT[ Btn7RXmtr2 ] == 1 ) FwVelocitySet( 200 , 0.66 );  //Base Shoot (from colour tile) SLOW 
	      else
	      {
        SensorValue[Piston2] = 1;	

				encoder_counts = 0;
				encoder_counts_last = 0;
				motor_velocity = 0;
				nSysTime_last = 0;

				target_velocity = 0; //Target will be reset
				current_error = 0;
				last_error = 0;
				drive = 0;
				drive_at_zero = 0;
				first_cross = 0;
				drive_approx = 0;
				motor_drive = 0;
				FwMotorSet(0);
				motor[port4] = motor[port5] = motor[port6] = motor[port7] = 0; //Actually might not even need this
	      }
	          
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
clearLCDLine(0);								//Clear LCD Lines
clearLCDLine(1);

//Display Motor Power Level
displayLCDNumber(1, 3, (abs(motor[port7])) , 6);

//Short delay for refresh rate
wait1Msec(100);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	        }
	}
